
Part 1:发布静态html文件到gitHub PAGE
步骤如下：
Step 1: 确保主文件名是index.html
Step 2: 上传所有本地相关文件（html, css，js,资源文件）到远程仓库
Step 3: 进入github里对应的远程仓库，点击settings,点击左侧pages,进入pages页面
Step 4： Branch选项选择项目所在的分支（比如master或main),点击save。发布成功（需等待几分钟）
step 5: 将发布的url地址拷贝，进入仓库主页面进行设置即可


Part 2:发布react项目（使用脚手架创建的项目）到gitHub PAGE

vite: https://dev.classmethod.jp/articles/deploying-reactvite-website-in-github-pages/

步骤如下：
Step 1: 上传本地项目到仓库

Step 2: 

for create-react-app:
    配置package.json 
    打开项目文件夹中的package.json，添加以下代码到 name:xxxx下面
    + "homepage": "https://myusername.github.io/YOUR_REPOSITORY_NAME", (%%%%要改成自己的用户名和项目名，否则报错%%%%）

for vite:
    配置vite.config.js:
    export default defineConfig({
    + base: "/YOUR_REPOSITORY_NAME/",(%%%%要改成自己的用户名和项目名，否则报错%%%%）
      plugins: [react()],
      resolve: {
        alias: {
          '@': '/src'
        }
      }
    })

  
Step 3: Install gh-pages and add deploy to scripts in package.json

    终端运行命令： npm install --save gh-pages
    
Step 4: Add the following scripts in your package.json:

      "scripts": {
    +   "predeploy": "npm run build",

        for create-react-app:
    +   "deploy": "gh-pages -d build",

        for vite:
    +   "deploy": "gh-pages -d dist",

        "start": "react-scripts start",
        "build": "react-scripts build",

Step 5: Deploy the site by running npm run deploy

    npm run deploy
    
Step 6: ensure your project’s settings use gh-pages 

   找到setting>左侧Pages>Build and deployment下，Branch(选择gh-pages），save
   
Step 7: 发布完成，等待几分钟，点击链接即可 
